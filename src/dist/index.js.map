{"version":3,"file":"index.js","sources":["../src/useCardSpin.ts","../src/CardSpin.tsx","../src/ErrorBoundary.tsx","../src/Card3D.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback, RefObject } from \"react\";\r\n\r\nexport interface UseCardSpinReturn {\r\n  dragging: boolean;\r\n  setIsHovered: (isHovered: boolean) => void;\r\n  handlePointerDown: (event: React.PointerEvent<HTMLDivElement>) => void;\r\n  handlePointerMove: (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => void; \r\n  handlePointerUp: (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => void;   \r\n}\r\n\r\n/**\r\n * Hook that manages the rotation logic and interactions of a spinning card.\r\n *\r\n * @param {RefObject<HTMLDivElement>} ref - Reference to the card element.\r\n * @param {number} rotationSpeed - The rotation speed of the card in degrees per second (default is 0).\r\n * @param {boolean} draggable - Determines if the card can be dragged (default is false).\r\n * @param {boolean} hoverToStop - Determines if the rotation should stop when hovering over the card (default is false).\r\n * @param {boolean} clickToFlip - Determines if the card should flip on click (default is false).\r\n * @returns {UseCardSpinReturn} - An object containing information about the card's state and event handlers.\r\n */\r\nexport const useCardSpin = (\r\n  ref: RefObject<HTMLDivElement>,\r\n  rotationSpeed = 0,\r\n  draggable = false,\r\n  hoverToStop = false,\r\n  clickToFlip = false\r\n): UseCardSpinReturn => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [dragging, setDragging] = useState(false);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n\r\n  const dragStartData = useRef({\r\n    dragStartRotation: 0,\r\n    dragStartClientX: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let animationFrameId: number;\r\n\r\n    const animateRotation = () => {\r\n      if ((!isHovered || !hoverToStop) && !dragging && rotationSpeed > 0) {\r\n        setRotation((prevRotation) => prevRotation + rotationSpeed);\r\n        animationFrameId = requestAnimationFrame(animateRotation);\r\n      }\r\n    };\r\n\r\n    animateRotation();\r\n\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [isHovered, dragging, rotationSpeed, hoverToStop]);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      const flipRotation = isFlipped ? 180 : 0;\r\n      ref.current.style.transform = `rotateY(${rotation + flipRotation}deg)`;\r\n    }\r\n  }, [rotation, isFlipped, ref]);\r\n\r\n  const handlePointerDown = useCallback(\r\n    (event: React.PointerEvent<HTMLDivElement>) => {\r\n      if (!draggable) return;\r\n\r\n      event.preventDefault();\r\n      const { clientX } = event;\r\n\r\n      dragStartData.current = {\r\n        dragStartRotation: rotation,\r\n        dragStartClientX: clientX,\r\n      };\r\n\r\n      setDragging(true);\r\n      ref.current?.setPointerCapture(event.pointerId);\r\n    },\r\n    [rotation, ref, draggable]\r\n  );\r\n\r\n  const handlePointerMove = useCallback(\r\n    (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => {\r\n      if (dragging && ref.current?.hasPointerCapture((event as PointerEvent).pointerId)) {\r\n        const { clientX } = event instanceof PointerEvent ? event : event.nativeEvent;\r\n        const deltaX = clientX - dragStartData.current.dragStartClientX;\r\n        const newRotation = dragStartData.current.dragStartRotation + deltaX * 0.5;\r\n        setRotation(newRotation);\r\n      }\r\n    },\r\n    [dragging, ref]\r\n  );\r\n\r\n  const handlePointerUp = useCallback(\r\n    (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => {\r\n      if (dragging) {\r\n        ref.current?.releasePointerCapture((event as PointerEvent).pointerId);\r\n        setDragging(false);\r\n      }\r\n    },\r\n    [dragging, ref]\r\n  );\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (!dragging) {\r\n      setIsFlipped((prev) => !prev);\r\n    }\r\n  }, [dragging]);\r\n\r\n  useEffect(() => {\r\n    const cardElement = ref.current;\r\n\r\n    if (!cardElement) return () => {};\r\n\r\n    if (clickToFlip) {\r\n      cardElement.addEventListener(\"click\", handleClick);\r\n    }\r\n\r\n    if (draggable) {\r\n      cardElement.addEventListener(\"pointermove\", handlePointerMove);\r\n      cardElement.addEventListener(\"pointerup\", handlePointerUp);\r\n    }\r\n\r\n    return () => {\r\n      if (clickToFlip) {\r\n        cardElement.removeEventListener(\"click\", handleClick);\r\n      }\r\n      if (draggable) {\r\n        cardElement.removeEventListener(\"pointermove\", handlePointerMove);\r\n        cardElement.removeEventListener(\"pointerup\", handlePointerUp);\r\n      }\r\n    };\r\n  }, [draggable, handlePointerMove, handlePointerUp, handleClick, clickToFlip, ref]);\r\n\r\n  return {\r\n    dragging,\r\n    setIsHovered,\r\n    handlePointerDown,\r\n    handlePointerMove,\r\n    handlePointerUp,\r\n  };\r\n};\r\n","import React, { useRef, ReactNode } from \"react\";\r\nimport { useCardSpin } from \"./useCardSpin\";\r\n\r\n/**\r\n * Properties of the CardSpin component.\r\n * \r\n * @interface CardSpinProps\r\n * @property {string} className - The CSS class to be applied to the card.\r\n * @property {ReactNode} children - The child elements that will be rendered inside the card.\r\n * @property {string} height - The height of the card (can use units like '100px', '50%', etc.).\r\n * @property {string} width - The width of the card (can use units like '100px', '50%', etc.).\r\n * @property {number} [rotationSpeed=0] - The rotation speed of the card in degrees per second.\r\n * @property {boolean} [draggable=false] - Determines if the card can be dragged.\r\n * @property {boolean} [hoverToStop=false] - Determines if the rotation should stop when hovering over the card.\r\n * @property {boolean} [clickToFlip=false] - Determines if the card should flip on click.\r\n */\r\nexport interface CardSpinProps {\r\n  className: string;\r\n  children: ReactNode;\r\n  height: string; \r\n  width: string;\r\n  rotationSpeed?: number;\r\n  draggable?: boolean;\r\n  hoverToStop?: boolean;\r\n  clickToFlip?: boolean;\r\n}\r\n\r\n/**\r\n * Component that represents a spinning card that can be dragged or clicked to flip.\r\n *\r\n * @param {CardSpinProps} props - The properties of the component.\r\n * @returns {JSX.Element} The JSX element that represents the spinning card.\r\n */\r\nconst CardSpin: React.FC<CardSpinProps> = ({\r\n  className,\r\n  children,\r\n  height,\r\n  width,\r\n  rotationSpeed = 0,\r\n  draggable = false,\r\n  hoverToStop = false,\r\n  clickToFlip = false,\r\n  ...props\r\n}: CardSpinProps): JSX.Element => {\r\n  const cardRef = useRef<HTMLDivElement>(null);\r\n  const {\r\n    dragging,\r\n    setIsHovered,\r\n    handlePointerDown,\r\n    handlePointerMove,\r\n    handlePointerUp,\r\n  } = useCardSpin(cardRef, rotationSpeed, draggable, hoverToStop, clickToFlip);\r\n\r\n  const style = {\r\n    width,\r\n    height,\r\n    cursor: draggable ? (dragging ? \"grabbing\" : \"grab\") : \"pointer\",\r\n    userSelect: \"none\" as const,\r\n    willChange: \"transform\" as const,\r\n    transition: dragging ? \"none\" : \"transform ease\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={className}\r\n      {...props}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n      onPointerDown={handlePointerDown}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerUp={handlePointerUp}\r\n      onPointerCancel={handlePointerUp}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nCardSpin.displayName = \"CardSpin\";\r\n\r\nexport default CardSpin;\r\n","import React, { Component, ErrorInfo } from \"react\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state to indicate that an error has occurred\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.error(\"Error caught in Error Boundary:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Fallback UI when there's an error\r\n      return <h1>Something went wrong. Please try again later.</h1>;\r\n    }\r\n\r\n    return this.props.children; \r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { ReactNode } from \"react\";\r\nimport CardSpin from \"./CardSpin\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\n/**\r\n * Properties of the Card3D component.\r\n * \r\n * @interface Card3DProps\r\n * @property {ReactNode, ReactNode} children - Child elements of the card, must contain exactly two elements: back and front.\r\n * @property {string} height - The height of the card (can use units like '100px', '50%', etc.).\r\n * @property {string} width - The width of the card (can use units like '100px', '50%', etc.).\r\n * @property {number} thickness - The thickness of the card in pixels.\r\n * @property {number} [rotationSpeed=0] - The rotation speed of the card in degrees per second. Default is 0.\r\n * @property {boolean} [hoverToStop=false] - Determines if the rotation should stop when hovering over the card. Default is false.\r\n * @property {\"dragToFlip\" | \"clickToFlip\"} mode - The interaction mode for flipping the card.\r\n * @property {string} leftColor - The color of the left side of the card.\r\n * @property {string} rightColor - The color of the right side of the card.\r\n * @property {string} borderColor - The color of the card edges. Default is 'white'.\r\n */\r\nexport interface Card3DProps {\r\n  children: [ReactNode, ReactNode]; \r\n  height: string;\r\n  width: string;\r\n  thickness: number; \r\n  rotationSpeed?: number;\r\n  hoverToStop?: boolean;\r\n  mode: \"dragToFlip\" | \"clickToFlip\"; \r\n  leftColor?: string; \r\n  rightColor?: string;\r\n  borderColor?: string;\r\n}\r\n\r\n/**\r\n * Component that represents an interactive 3D card that can be flipped.\r\n *\r\n * @param {Card3DProps} props - The properties of the component.\r\n * @returns {JSX.Element | null} The JSX element that represents the card or null if the number of children is not equal to 2.\r\n *\r\n * @see Card3DProps - The properties of the Card3D component, which define the configuration and behavior of the card.\r\n */\r\nconst Card3D: React.FC<Card3DProps> = ({\r\n  children,\r\n  height,\r\n  width,\r\n  thickness,\r\n  rotationSpeed = 0,\r\n  hoverToStop = false,\r\n  mode,\r\n  leftColor,\r\n  rightColor,\r\n  borderColor = \"white\"\r\n}: Card3DProps): JSX.Element | null => { \r\n\r\n  if (children.length !== 2) {\r\n    console.warn(\"Card component expects exactly two children.\");\r\n    return null; \r\n  }\r\n\r\n  const [front, back] = children;\r\n\r\n  const borderStyle = {\r\n    colorLeft: leftColor || borderColor,\r\n    colorRight: rightColor || borderColor,\r\n  };\r\n\r\n  const halfThickness = thickness / 2;\r\n  const effectiveRotationSpeed = mode === \"clickToFlip\" ? 0 : rotationSpeed;\r\n\r\n  const frontStyle = {\r\n    transform: `rotateY(0deg) translateZ(${halfThickness}px)`,\r\n    background: \"red\",\r\n  };\r\n\r\n  const backStyle = {\r\n    transform: `rotateY(180deg) translateZ(${halfThickness}px)`,\r\n    background: \"blue\",\r\n  };\r\n\r\n  const leftSideStyle = {\r\n    width: `${thickness}px`,\r\n    left: `-${halfThickness}px`,\r\n    backgroundColor: borderStyle.colorLeft,\r\n  };\r\n\r\n  const rightSideStyle = {\r\n    width: `${thickness}px`,\r\n    right: `-${halfThickness}px`,\r\n    backgroundColor: borderStyle.colorRight,\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\" role=\"button\" tabIndex={0}>\r\n      <ErrorBoundary>\r\n        <CardSpin\r\n          className='card'\r\n          height={height}\r\n          width={width}\r\n          rotationSpeed={effectiveRotationSpeed}\r\n          draggable={mode === \"dragToFlip\"}\r\n          hoverToStop={hoverToStop}\r\n          clickToFlip={mode === \"clickToFlip\"}\r\n        >\r\n          <div className=\"card-face card-front\" style={frontStyle}>\r\n            {front}\r\n          </div>\r\n\r\n          <div className=\"card-face card-back\" style={backStyle}>\r\n            {back}\r\n          </div>\r\n\r\n          <div className=\"card-side card-side-left\" style={leftSideStyle}></div>\r\n          <div className=\"card-side card-side-right\" style={rightSideStyle}></div>\r\n        </CardSpin>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard3D.displayName = \"Card3D\";\r\n\r\nexport default Card3D;\r\n"],"names":["useCardSpin","ref","rotationSpeed","draggable","hoverToStop","clickToFlip","_useState","useState","isHovered","setIsHovered","_useState2","rotation","setRotation","_useState3","dragging","setDragging","_useState4","isFlipped","setIsFlipped","dragStartData","useRef","dragStartRotation","dragStartClientX","useEffect","animationFrameId","animateRotation","prevRotation","requestAnimationFrame","cancelAnimationFrame","current","flipRotation","style","transform","handlePointerDown","useCallback","event","preventDefault","clientX","_ref$current","setPointerCapture","pointerId","handlePointerMove","_ref$current2","hasPointerCapture","_ref","PointerEvent","nativeEvent","deltaX","newRotation","handlePointerUp","_ref$current3","releasePointerCapture","handleClick","prev","cardElement","addEventListener","removeEventListener","CardSpin","className","children","height","width","_ref$rotationSpeed","_ref$draggable","_ref$hoverToStop","_ref$clickToFlip","props","_objectWithoutPropertiesLoose","_excluded","cardRef","_useCardSpin","cursor","userSelect","willChange","transition","React","onMouseEnter","onMouseLeave","onPointerDown","onPointerMove","onPointerUp","onPointerCancel","displayName","ErrorBoundary","_Component","_this","call","state","hasError","_inheritsLoose","getDerivedStateFromError","_proto","prototype","componentDidCatch","error","errorInfo","console","render","Component","Card3D","thickness","mode","leftColor","rightColor","_ref$borderColor","borderColor","length","warn","front","back","borderStyle","colorLeft","colorRight","halfThickness","effectiveRotationSpeed","frontStyle","background","backStyle","leftSideStyle","left","backgroundColor","rightSideStyle","right","role","tabIndex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBO,IAAMA,WAAW,GAAG,SAAdA,WAAWA,CACtBC,GAA8B,EAC9BC,aAAa,EACbC,SAAS,EACTC,WAAW,EACXC,WAAW;MAHXH,aAAa;IAAbA,aAAa,GAAG,CAAC;;EAAA,IACjBC,SAAS;IAATA,SAAS,GAAG,KAAK;;EAAA,IACjBC,WAAW;IAAXA,WAAW,GAAG,KAAK;;EAAA,IACnBC,WAAW;IAAXA,WAAW,GAAG,KAAK;;EAEnB,IAAAC,SAAA,GAAkCC,cAAQ,CAAC,KAAK,CAAC;IAA1CC,SAAS,GAAAF,SAAA;IAAEG,YAAY,GAAAH,SAAA;EAC9B,IAAAI,UAAA,GAAgCH,cAAQ,CAAC,CAAC,CAAC;IAApCI,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAgCN,cAAQ,CAAC,KAAK,CAAC;IAAxCO,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAAkCT,cAAQ,CAAC,KAAK,CAAC;IAA1CU,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9B,IAAMG,aAAa,GAAGC,YAAM,CAAC;IAC3BC,iBAAiB,EAAE,CAAC;IACpBC,gBAAgB,EAAE;GACnB,CAAC;EAEFC,eAAS,CAAC;IACR,IAAIC,gBAAwB;IAE5B,IAAMC,gBAAe,GAAG,SAAlBA,eAAeA;MACnB,IAAI,CAAC,CAACjB,SAAS,IAAI,CAACJ,WAAW,KAAK,CAACU,QAAQ,IAAIZ,aAAa,GAAG,CAAC,EAAE;QAClEU,WAAW,CAAC,UAACc,YAAY;UAAA,OAAKA,YAAY,GAAGxB,aAAa;UAAC;QAC3DsB,gBAAgB,GAAGG,qBAAqB,CAACF,gBAAe,CAAC;;KAE5D;IAEDA,gBAAe,EAAE;IAEjB,OAAO;MAAA,OAAMG,oBAAoB,CAACJ,gBAAgB,CAAC;;GACpD,EAAE,CAAChB,SAAS,EAAEM,QAAQ,EAAEZ,aAAa,EAAEE,WAAW,CAAC,CAAC;EAErDmB,eAAS,CAAC;IACR,IAAItB,GAAG,CAAC4B,OAAO,EAAE;MACf,IAAMC,YAAY,GAAGb,SAAS,GAAG,GAAG,GAAG,CAAC;MACxChB,GAAG,CAAC4B,OAAO,CAACE,KAAK,CAACC,SAAS,iBAAcrB,QAAQ,GAAGmB,YAAY,UAAM;;GAEzE,EAAE,CAACnB,QAAQ,EAAEM,SAAS,EAAEhB,GAAG,CAAC,CAAC;EAE9B,IAAMgC,iBAAiB,GAAGC,iBAAW,CACnC,UAACC,KAAyC;;IACxC,IAAI,CAAChC,SAAS,EAAE;IAEhBgC,KAAK,CAACC,cAAc,EAAE;IACtB,IAAQC,OAAO,GAAKF,KAAK,CAAjBE,OAAO;IAEflB,aAAa,CAACU,OAAO,GAAG;MACtBR,iBAAiB,EAAEV,QAAQ;MAC3BW,gBAAgB,EAAEe;KACnB;IAEDtB,WAAW,CAAC,IAAI,CAAC;IACjB,CAAAuB,YAAA,GAAArC,GAAG,CAAC4B,OAAO,cAAAS,YAAA,uBAAXA,YAAA,CAAaC,iBAAiB,CAACJ,KAAK,CAACK,SAAS,CAAC;GAChD,EACD,CAAC7B,QAAQ,EAAEV,GAAG,EAAEE,SAAS,CAAC,CAC3B;EAED,IAAMsC,iBAAiB,GAAGP,iBAAW,CACnC,UAACC,KAAwD;;IACvD,IAAIrB,QAAQ,KAAA4B,aAAA,GAAIzC,GAAG,CAAC4B,OAAO,cAAAa,aAAA,eAAXA,aAAA,CAAaC,iBAAiB,CAAER,KAAsB,CAACK,SAAS,CAAC,EAAE;MACjF,IAAAI,IAAA,GAAoBT,KAAK,YAAYU,YAAY,GAAGV,KAAK,GAAGA,KAAK,CAACW,WAAW;QAArET,OAAO,GAAAO,IAAA,CAAPP,OAAO;MACf,IAAMU,MAAM,GAAGV,OAAO,GAAGlB,aAAa,CAACU,OAAO,CAACP,gBAAgB;MAC/D,IAAM0B,WAAW,GAAG7B,aAAa,CAACU,OAAO,CAACR,iBAAiB,GAAG0B,MAAM,GAAG,GAAG;MAC1EnC,WAAW,CAACoC,WAAW,CAAC;;GAE3B,EACD,CAAClC,QAAQ,EAAEb,GAAG,CAAC,CAChB;EAED,IAAMgD,eAAe,GAAGf,iBAAW,CACjC,UAACC,KAAwD;IACvD,IAAIrB,QAAQ,EAAE;MAAA,IAAAoC,aAAA;MACZ,CAAAA,aAAA,GAAAjD,GAAG,CAAC4B,OAAO,cAAAqB,aAAA,uBAAXA,aAAA,CAAaC,qBAAqB,CAAEhB,KAAsB,CAACK,SAAS,CAAC;MACrEzB,WAAW,CAAC,KAAK,CAAC;;GAErB,EACD,CAACD,QAAQ,EAAEb,GAAG,CAAC,CAChB;EAED,IAAMmD,WAAW,GAAGlB,iBAAW,CAAC;IAC9B,IAAI,CAACpB,QAAQ,EAAE;MACbI,YAAY,CAAC,UAACmC,IAAI;QAAA,OAAK,CAACA,IAAI;QAAC;;GAEhC,EAAE,CAACvC,QAAQ,CAAC,CAAC;EAEdS,eAAS,CAAC;IACR,IAAM+B,WAAW,GAAGrD,GAAG,CAAC4B,OAAO;IAE/B,IAAI,CAACyB,WAAW,EAAE,OAAO,cAAQ;IAEjC,IAAIjD,WAAW,EAAE;MACfiD,WAAW,CAACC,gBAAgB,CAAC,OAAO,EAAEH,WAAW,CAAC;;IAGpD,IAAIjD,SAAS,EAAE;MACbmD,WAAW,CAACC,gBAAgB,CAAC,aAAa,EAAEd,iBAAiB,CAAC;MAC9Da,WAAW,CAACC,gBAAgB,CAAC,WAAW,EAAEN,eAAe,CAAC;;IAG5D,OAAO;MACL,IAAI5C,WAAW,EAAE;QACfiD,WAAW,CAACE,mBAAmB,CAAC,OAAO,EAAEJ,WAAW,CAAC;;MAEvD,IAAIjD,SAAS,EAAE;QACbmD,WAAW,CAACE,mBAAmB,CAAC,aAAa,EAAEf,iBAAiB,CAAC;QACjEa,WAAW,CAACE,mBAAmB,CAAC,WAAW,EAAEP,eAAe,CAAC;;KAEhE;GACF,EAAE,CAAC9C,SAAS,EAAEsC,iBAAiB,EAAEQ,eAAe,EAAEG,WAAW,EAAE/C,WAAW,EAAEJ,GAAG,CAAC,CAAC;EAElF,OAAO;IACLa,QAAQ,EAARA,QAAQ;IACRL,YAAY,EAAZA,YAAY;IACZwB,iBAAiB,EAAjBA,iBAAiB;IACjBQ,iBAAiB,EAAjBA,iBAAiB;IACjBQ,eAAe,EAAfA;GACD;AACH,CAAC;;;ACzID,AAiCA,IAAMQ,QAAQ,GAA4B,SAApCA,QAAQA,CAAAb,IAAA;MACZc,SAAS,GAAAd,IAAA,CAATc,SAAS;IACTC,QAAQ,GAAAf,IAAA,CAARe,QAAQ;IACRC,MAAM,GAAAhB,IAAA,CAANgB,MAAM;IACNC,KAAK,GAAAjB,IAAA,CAALiB,KAAK;IAAAC,kBAAA,GAAAlB,IAAA,CACL1C,aAAa;IAAbA,aAAa,GAAA4D,kBAAA,cAAG,CAAC,GAAAA,kBAAA;IAAAC,cAAA,GAAAnB,IAAA,CACjBzC,SAAS;IAATA,SAAS,GAAA4D,cAAA,cAAG,KAAK,GAAAA,cAAA;IAAAC,gBAAA,GAAApB,IAAA,CACjBxC,WAAW;IAAXA,WAAW,GAAA4D,gBAAA,cAAG,KAAK,GAAAA,gBAAA;IAAAC,gBAAA,GAAArB,IAAA,CACnBvC,WAAW;IAAXA,WAAW,GAAA4D,gBAAA,cAAG,KAAK,GAAAA,gBAAA;IAChBC,KAAK,GAAAC,6BAAA,CAAAvB,IAAA,EAAAwB,SAAA;EAER,IAAMC,OAAO,GAAGjD,YAAM,CAAiB,IAAI,CAAC;EAC5C,IAAAkD,YAAA,GAMItE,WAAW,CAACqE,OAAO,EAAEnE,aAAa,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,CAAC;IAL1ES,QAAQ,GAAAwD,YAAA,CAARxD,QAAQ;IACRL,YAAY,GAAA6D,YAAA,CAAZ7D,YAAY;IACZwB,iBAAiB,GAAAqC,YAAA,CAAjBrC,iBAAiB;IACjBQ,iBAAiB,GAAA6B,YAAA,CAAjB7B,iBAAiB;IACjBQ,eAAe,GAAAqB,YAAA,CAAfrB,eAAe;EAGjB,IAAMlB,KAAK,GAAG;IACZ8B,KAAK,EAALA,KAAK;IACLD,MAAM,EAANA,MAAM;IACNW,MAAM,EAAEpE,SAAS,GAAIW,QAAQ,GAAG,UAAU,GAAG,MAAM,GAAI,SAAS;IAChE0D,UAAU,EAAE,MAAe;IAC3BC,UAAU,EAAE,WAAoB;IAChCC,UAAU,EAAE5D,QAAQ,GAAG,MAAM,GAAG;GACjC;EAED,OACE6D;IACE1E,GAAG,EAAEoE,OAAO;IACZX,SAAS,EAAEA;KACPQ,KAAK;IACTU,YAAY,EAAE,SAAdA,YAAYA;MAAA,OAAQnE,YAAY,CAAC,IAAI,CAAC;;IACtCoE,YAAY,EAAE,SAAdA,YAAYA;MAAA,OAAQpE,YAAY,CAAC,KAAK,CAAC;;IACvCqE,aAAa,EAAE7C,iBAAiB;IAChC8C,aAAa,EAAEtC,iBAAiB;IAChCuC,WAAW,EAAE/B,eAAe;IAC5BgC,eAAe,EAAEhC,eAAe;IAChClB,KAAK,EAAEA;MAEN4B,QAAQ,CACL;AAEV,CAAC;AAEDF,QAAQ,CAACyB,WAAW,GAAG,UAAU;;AChFmB,IAU9CC,aAAc,0BAAAC,UAAA;EAClB,SAAAD,cAAYjB,KAAY;;IACtBmB,KAAA,GAAAD,UAAA,CAAAE,IAAA,OAAMpB,KAAK,CAAC;IACZmB,KAAA,CAAKE,KAAK,GAAG;MAAEC,QAAQ,EAAE;KAAO;IAAC,OAAAH,KAAA;;EAClCI,cAAA,CAAAN,aAAA,EAAAC,UAAA;EAAAD,aAAA,CAEMO,wBAAwB,GAA/B,SAAOA,wBAAwBA;IAE7B,OAAO;MAAEF,QAAQ,EAAE;KAAM;GAC1B;EAAA,IAAAG,MAAA,GAAAR,aAAA,CAAAS,SAAA;EAAAD,MAAA,CAEDE,iBAAiB,GAAjB,SAAAA,iBAAiBA,CAACC,KAAY,EAAEC,SAAoB;IAElDC,OAAO,CAACF,KAAK,CAAC,iCAAiC,EAAEA,KAAK,EAAEC,SAAS,CAAC;GACnE;EAAAJ,MAAA,CAEDM,MAAM,GAAN,SAAAA,MAAMA;IACJ,IAAI,IAAI,CAACV,KAAK,CAACC,QAAQ,EAAE;MAEvB,OAAOb,yFAAsD;;IAG/D,OAAO,IAAI,CAACT,KAAK,CAACP,QAAQ;GAC3B;EAAA,OAAAwB,aAAA;AAAA,EAvByBe,eAAuB;;AC8BnD,IAAMC,MAAM,GAA0B,SAAhCA,MAAMA,CAAAvD,IAAA;MACVe,QAAQ,GAAAf,IAAA,CAARe,QAAQ;IACRC,MAAM,GAAAhB,IAAA,CAANgB,MAAM;IACNC,KAAK,GAAAjB,IAAA,CAALiB,KAAK;IACLuC,SAAS,GAAAxD,IAAA,CAATwD,SAAS;IAAAtC,kBAAA,GAAAlB,IAAA,CACT1C,aAAa;IAAbA,aAAa,GAAA4D,kBAAA,cAAG,CAAC,GAAAA,kBAAA;IAAAE,gBAAA,GAAApB,IAAA,CACjBxC,WAAW;IAAXA,WAAW,GAAA4D,gBAAA,cAAG,KAAK,GAAAA,gBAAA;IACnBqC,IAAI,GAAAzD,IAAA,CAAJyD,IAAI;IACJC,SAAS,GAAA1D,IAAA,CAAT0D,SAAS;IACTC,UAAU,GAAA3D,IAAA,CAAV2D,UAAU;IAAAC,gBAAA,GAAA5D,IAAA,CACV6D,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,OAAO,GAAAA,gBAAA;EAGrB,IAAI7C,QAAQ,CAAC+C,MAAM,KAAK,CAAC,EAAE;IACzBV,OAAO,CAACW,IAAI,CAAC,8CAA8C,CAAC;IAC5D,OAAO,IAAI;;EAGb,IAAOC,KAAK,GAAUjD,QAAQ;IAAhBkD,IAAI,GAAIlD,QAAQ;EAE9B,IAAMmD,WAAW,GAAG;IAClBC,SAAS,EAAET,SAAS,IAAIG,WAAW;IACnCO,UAAU,EAAET,UAAU,IAAIE;GAC3B;EAED,IAAMQ,aAAa,GAAGb,SAAS,GAAG,CAAC;EACnC,IAAMc,sBAAsB,GAAGb,IAAI,KAAK,aAAa,GAAG,CAAC,GAAGnG,aAAa;EAEzE,IAAMiH,UAAU,GAAG;IACjBnF,SAAS,gCAA8BiF,aAAa,QAAK;IACzDG,UAAU,EAAE;GACb;EAED,IAAMC,SAAS,GAAG;IAChBrF,SAAS,kCAAgCiF,aAAa,QAAK;IAC3DG,UAAU,EAAE;GACb;EAED,IAAME,aAAa,GAAG;IACpBzD,KAAK,EAAKuC,SAAS,OAAI;IACvBmB,IAAI,QAAMN,aAAa,OAAI;IAC3BO,eAAe,EAAEV,WAAW,CAACC;GAC9B;EAED,IAAMU,cAAc,GAAG;IACrB5D,KAAK,EAAKuC,SAAS,OAAI;IACvBsB,KAAK,QAAMT,aAAa,OAAI;IAC5BO,eAAe,EAAEV,WAAW,CAACE;GAC9B;EAED,OACErC;IAAKjB,SAAS,EAAC,gBAAgB;IAACiE,IAAI,EAAC,QAAQ;IAACC,QAAQ,EAAE;KACtDjD,6BAACQ,aAAa,QACZR,6BAAClB,QAAQ;IACPC,SAAS,EAAC,MAAM;IAChBE,MAAM,EAAEA,MAAM;IACdC,KAAK,EAAEA,KAAK;IACZ3D,aAAa,EAAEgH,sBAAsB;IACrC/G,SAAS,EAAEkG,IAAI,KAAK,YAAY;IAChCjG,WAAW,EAAEA,WAAW;IACxBC,WAAW,EAAEgG,IAAI,KAAK;KAEtB1B;IAAKjB,SAAS,EAAC,sBAAsB;IAAC3B,KAAK,EAAEoF;KAC1CP,KAAK,CACF,EAENjC;IAAKjB,SAAS,EAAC,qBAAqB;IAAC3B,KAAK,EAAEsF;KACzCR,IAAI,CACD,EAENlC;IAAKjB,SAAS,EAAC,0BAA0B;IAAC3B,KAAK,EAAEuF;IAAqB,EACtE3C;IAAKjB,SAAS,EAAC,2BAA2B;IAAC3B,KAAK,EAAE0F;IAAsB,CAC/D,CACG,CACZ;AAEV,CAAC;AAEDtB,MAAM,CAACjB,WAAW,GAAG,QAAQ;;;;"}