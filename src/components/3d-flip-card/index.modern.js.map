{"version":3,"file":"index.modern.js","sources":["../src/useCardSpin.ts","../src/CardSpin.tsx","../src/ErrorBoundary.tsx","../src/Card3D.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback, RefObject } from \"react\";\r\n\r\nexport interface UseCardSpinReturn {\r\n  dragging: boolean;\r\n  setIsHovered: (isHovered: boolean) => void;\r\n  handlePointerDown: (event: React.PointerEvent<HTMLDivElement>) => void;\r\n  handlePointerMove: (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => void; \r\n  handlePointerUp: (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => void;   \r\n}\r\n\r\n/**\r\n * Hook that manages the rotation logic and interactions of a spinning card.\r\n *\r\n * @param {RefObject<HTMLDivElement>} ref - Reference to the card element.\r\n * @param {number} rotationSpeed - The rotation speed of the card in degrees per second (default is 0).\r\n * @param {boolean} draggable - Determines if the card can be dragged (default is false).\r\n * @param {boolean} hoverToStop - Determines if the rotation should stop when hovering over the card (default is false).\r\n * @param {boolean} clickToFlip - Determines if the card should flip on click (default is false).\r\n * @returns {UseCardSpinReturn} - An object containing information about the card's state and event handlers.\r\n */\r\nexport const useCardSpin = (\r\n  ref: RefObject<HTMLDivElement>,\r\n  rotationSpeed = 0,\r\n  draggable = false,\r\n  hoverToStop = false,\r\n  clickToFlip = false\r\n): UseCardSpinReturn => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [rotation, setRotation] = useState(0);\r\n  const [dragging, setDragging] = useState(false);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const [resetRotation, setResetRotation] = useState(false);\r\n  const dragStartData = useRef({\r\n    dragStartRotation: 0,\r\n    dragStartClientX: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let animationFrameId: number;\r\n\r\n    const animateRotation = () => {\r\n      if ((!isHovered || !hoverToStop) && !dragging && rotationSpeed > 0) {\r\n        setRotation((prevRotation) => prevRotation + rotationSpeed);\r\n        animationFrameId = requestAnimationFrame(animateRotation);\r\n      }\r\n    };\r\n\r\n    animateRotation();\r\n\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [isHovered, dragging, rotationSpeed, hoverToStop]);  \r\n\r\n  useEffect(() => {\r\n    if (ref.current && !resetRotation) {\r\n      ref.current.style.transform = `rotateY(${rotation}deg)`;\r\n      if (!dragging && ref.current.style.transition === 'none' && rotation !== 0) {\r\n        ref.current.style.transition = 'transform 0.6s ease';\r\n      }\r\n    }\r\n  }, [rotation]);\r\n\r\n  useEffect(() => {\r\n    if (ref.current) {\r\n      if (rotation !== 0 && resetRotation) {\r\n        const closestMultipleOf360 = Math.round(rotation / 360) * 360;\r\n        ref.current.style.transform = `rotateY(${closestMultipleOf360}deg)`;\r\n\r\n        setTimeout(() => {\r\n          if (ref.current) {\r\n            ref.current.style.transition = 'none';\r\n            ref.current.style.transform = 'rotateY(0deg)';\r\n            setRotation(0);\r\n            setResetRotation(false); \r\n          }\r\n        }, 600); \r\n      } \r\n    } \r\n  }); \r\n\r\n  useEffect(() => {\r\n    if (ref.current && !resetRotation) {\r\n      setResetRotation(true);\r\n    }\r\n\r\n  }, [draggable]);\r\n\r\n  const handleFlip = useCallback(() => {\r\n    setRotation((prevRotation) => {\r\n      let newRotation = prevRotation;\r\n  \r\n      if (prevRotation === 0) {\r\n        newRotation = 180;\r\n        setIsFlipped(false);\r\n      } else if (prevRotation === 180 && !isFlipped) {\r\n        newRotation = 360;\r\n        setIsFlipped(true);\r\n      } else if (prevRotation === 360) {\r\n        newRotation = 180;\r\n        setIsFlipped(true);\r\n      } else if (prevRotation === 180 && isFlipped) {\r\n        newRotation = 0;\r\n        setIsFlipped(false);\r\n      }\r\n      \r\n      return newRotation;\r\n    });\r\n  }, [isFlipped]);\r\n\r\n  const handlePointerDown = useCallback(\r\n    (event: React.PointerEvent<HTMLDivElement>) => {\r\n      if (!draggable) return;\r\n\r\n      event.preventDefault();\r\n      const { clientX } = event;\r\n\r\n      dragStartData.current = {\r\n        dragStartRotation: rotation,\r\n        dragStartClientX: clientX,\r\n      };\r\n\r\n      setDragging(true);\r\n      ref.current?.setPointerCapture(event.pointerId);\r\n    },\r\n    [rotation, ref, draggable]\r\n  );\r\n\r\n  const handlePointerMove = useCallback(\r\n    (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => {\r\n      if (dragging && ref.current?.hasPointerCapture((event as PointerEvent).pointerId)) {\r\n        const { clientX } = event instanceof PointerEvent ? event : event.nativeEvent;\r\n        const deltaX = clientX - dragStartData.current.dragStartClientX;\r\n        const newRotation = dragStartData.current.dragStartRotation + deltaX * 0.5;\r\n        setRotation(newRotation);\r\n      }\r\n    },\r\n    [dragging, ref]\r\n  );\r\n\r\n  const handlePointerUp = useCallback(\r\n    (event: PointerEvent | React.PointerEvent<HTMLDivElement>) => {\r\n      if (dragging) {\r\n        ref.current?.releasePointerCapture((event as PointerEvent).pointerId);\r\n        setDragging(false);\r\n      }\r\n    },\r\n    [dragging, ref]\r\n  );\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (!dragging) {\r\n      handleFlip(); \r\n    }\r\n  }, [dragging, handleFlip]);\r\n\r\n  useEffect(() => {\r\n    const cardElement = ref.current;\r\n\r\n    if (!cardElement) return () => {};\r\n\r\n    if (clickToFlip) {\r\n      cardElement.addEventListener(\"click\", handleClick);\r\n    }\r\n\r\n    if (draggable) {\r\n      cardElement.addEventListener(\"pointermove\", handlePointerMove);\r\n      cardElement.addEventListener(\"pointerup\", handlePointerUp);\r\n    }\r\n\r\n    return () => {\r\n      if (clickToFlip) {\r\n        cardElement.removeEventListener(\"click\", handleClick);\r\n      }\r\n      if (draggable) {\r\n        cardElement.removeEventListener(\"pointermove\", handlePointerMove);\r\n        cardElement.removeEventListener(\"pointerup\", handlePointerUp);\r\n      }\r\n    };\r\n  }, [draggable, handlePointerMove, handlePointerUp, handleClick, clickToFlip, ref]);\r\n\r\n  return {\r\n    dragging,\r\n    setIsHovered,\r\n    handlePointerDown,\r\n    handlePointerMove,\r\n    handlePointerUp,\r\n  };\r\n}; ","import React, { useRef, ReactNode } from \"react\";\r\nimport { useCardSpin } from \"./useCardSpin\";\r\n\r\n/**\r\n * Properties of the CardSpin component.\r\n * \r\n * @interface CardSpinProps\r\n * @property {string} className - The CSS class to be applied to the card.\r\n * @property {ReactNode} children - The child elements that will be rendered inside the card.\r\n * @property {string} height - The height of the card (can use units like '100px', '50%', etc.).\r\n * @property {string} width - The width of the card (can use units like '100px', '50%', etc.).\r\n * @property {number} [rotationSpeed=0] - The rotation speed of the card in degrees per second.\r\n * @property {boolean} [draggable=false] - Determines if the card can be dragged.\r\n * @property {boolean} [hoverToStop=false] - Determines if the rotation should stop when hovering over the card.\r\n * @property {boolean} [clickToFlip=false] - Determines if the card should flip on click.\r\n */\r\nexport interface CardSpinProps {\r\n  className: string;\r\n  children: ReactNode;\r\n  height: string; \r\n  width: string;\r\n  rotationSpeed?: number;\r\n  draggable?: boolean;\r\n  hoverToStop?: boolean;\r\n  clickToFlip?: boolean;\r\n}\r\n\r\n/**\r\n * Component that represents a spinning card that can be dragged or clicked to flip.\r\n *\r\n * @param {CardSpinProps} props - The properties of the component.\r\n * @returns {JSX.Element} The JSX element that represents the spinning card.\r\n */\r\nconst CardSpin: React.FC<CardSpinProps> = ({\r\n  className,\r\n  children,\r\n  height,\r\n  width,\r\n  rotationSpeed = 0,\r\n  draggable = true,\r\n  hoverToStop = false,\r\n  clickToFlip = false,\r\n  ...props\r\n}: CardSpinProps): JSX.Element => {\r\n  const cardRef = useRef<HTMLDivElement>(null);\r\n  const {\r\n    dragging,\r\n    setIsHovered,\r\n    handlePointerDown,\r\n    handlePointerMove,\r\n    handlePointerUp,\r\n  } = useCardSpin(cardRef, rotationSpeed, draggable, hoverToStop, clickToFlip);\r\n\r\n  const style = {\r\n    minWidth: width,\r\n    maxWidth: width,\r\n    minHeight: height,\r\n    maxHeight: height,\r\n    cursor: draggable ? (dragging ? \"grabbing\" : \"grab\") : \"pointer\",\r\n    userSelect: \"none\" as const,\r\n    willChange: \"transform\" as const,\r\n    transition: dragging ? \"none\" : \"transform ease\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={className}\r\n      {...props}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n      onPointerDown={handlePointerDown}\r\n      onPointerMove={handlePointerMove}\r\n      onPointerUp={handlePointerUp}\r\n      onPointerCancel={handlePointerUp}\r\n      style={style}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nCardSpin.displayName = \"CardSpin\";\r\n\r\nexport default CardSpin;\r\n","import React, { Component, ErrorInfo } from \"react\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    // Update state to indicate that an error has occurred\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    console.error(\"Error caught in Error Boundary:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Fallback UI when there's an error\r\n      return <h1>Something went wrong. Please try again later.</h1>;\r\n    }\r\n\r\n    return this.props.children; \r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { ReactNode } from \"react\";\r\nimport CardSpin from \"./CardSpin\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\n/**\r\n * Properties of the Card3D component.\r\n * \r\n * @interface Card3DProps\r\n * @property {ReactNode, ReactNode} children - Child elements of the card, must contain exactly two elements: back and front.\r\n * @property {string} height - The height of the card (can use units like '100px', '50%', etc.).\r\n * @property {string} width - The width of the card (can use units like '100px', '50%', etc.).\r\n * @property {number} thickness - The thickness of the card in pixels.\r\n * @property {number} [rotationSpeed=0] - The rotation speed of the card in degrees per second. Default is 0.\r\n * @property {boolean} [hoverToStop=false] - Determines if the rotation should stop when hovering over the card. Default is false.\r\n * @property {\"dragToFlip\" | \"clickToFlip\"} mode - The interaction mode for flipping the card.\r\n * @property {string} leftColor - The color of the left side of the card.\r\n * @property {string} rightColor - The color of the right side of the card.\r\n * @property {string} borderColor - The color of the card edges. Default is 'white'.\r\n */\r\nexport interface Card3DProps {\r\n  children: [ReactNode, ReactNode]; \r\n  height: string;\r\n  width: string;\r\n  thickness: number; \r\n  rotationSpeed?: number;\r\n  hoverToStop?: boolean;\r\n  mode: \"dragToFlip\" | \"clickToFlip\"; \r\n  leftColor?: string; \r\n  rightColor?: string;\r\n  borderColor?: string;\r\n}\r\n\r\n/**\r\n * Component that represents an interactive 3D card that can be flipped.\r\n *\r\n * @param {Card3DProps} props - The properties of the component.\r\n * @returns {JSX.Element | null} The JSX element that represents the card or null if the number of children is not equal to 2.\r\n *\r\n * @see Card3DProps - The properties of the Card3D component, which define the configuration and behavior of the card.\r\n */\r\nconst Card3D: React.FC<Card3DProps> = ({\r\n  children,\r\n  height,\r\n  width,\r\n  thickness,\r\n  rotationSpeed = 0,\r\n  hoverToStop = false,\r\n  mode = \"dragToFlip\",\r\n  leftColor,\r\n  rightColor,\r\n  borderColor = \"white\"\r\n}: Card3DProps): JSX.Element | null => { \r\n\r\n  if (children.length !== 2) {\r\n    console.warn(\"Card component expects exactly two children.\");\r\n    return null; \r\n  }\r\n\r\n  const [front, back] = children;\r\n\r\n  const borderStyle = {\r\n    colorLeft: leftColor || borderColor,\r\n    colorRight: rightColor || borderColor,\r\n  };\r\n\r\n  const halfThickness = thickness / 2;\r\n  const effectiveRotationSpeed = mode === \"clickToFlip\" ? 0 : rotationSpeed;\r\n\r\n  const frontStyle = {\r\n    transform: `rotateY(0deg) translateZ(${halfThickness}px)`,\r\n    background: \"red\",\r\n  };\r\n\r\n  const backStyle = {\r\n    transform: `rotateY(180deg) translateZ(${halfThickness}px)`,\r\n    background: \"blue\",\r\n  };\r\n\r\n  const leftSideStyle = {\r\n    width: `${thickness}px`,\r\n    left: `-${Math.floor(halfThickness)}px`,\r\n    backgroundColor: borderStyle.colorLeft,\r\n  };\r\n\r\n  const rightSideStyle = {\r\n    width: `${thickness}px`,\r\n    right: `-${Math.floor(halfThickness)}px`,\r\n    backgroundColor: borderStyle.colorRight,\r\n  };\r\n\r\n  return (\r\n    <div className=\"card-container\" role=\"button\" tabIndex={0}>\r\n      <ErrorBoundary>\r\n        <CardSpin\r\n          className='card'\r\n          height={height}\r\n          width={width}\r\n          rotationSpeed={effectiveRotationSpeed}\r\n          draggable={mode === \"dragToFlip\"}\r\n          hoverToStop={hoverToStop}\r\n          clickToFlip={mode === \"clickToFlip\"}\r\n        >\r\n          <div className=\"card-face card-front\" style={frontStyle}>\r\n            {front}\r\n          </div>\r\n\r\n          <div className=\"card-face card-back\" style={backStyle}>\r\n            {back}\r\n          </div>\r\n\r\n          <div className=\"card-side card-side-left\" style={leftSideStyle}></div>\r\n          <div className=\"card-side card-side-right\" style={rightSideStyle}></div>\r\n        </CardSpin>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard3D.displayName = \"Card3D\";\r\n\r\nexport default Card3D;\r\n"],"names":["useCardSpin","ref","rotationSpeed","draggable","hoverToStop","clickToFlip","_useState","useState","isHovered","setIsHovered","_useState2","rotation","setRotation","_useState3","dragging","setDragging","_useState4","isFlipped","setIsFlipped","_useState5","resetRotation","setResetRotation","dragStartData","useRef","dragStartRotation","dragStartClientX","useEffect","animationFrameId","animateRotation","prevRotation","requestAnimationFrame","cancelAnimationFrame","current","style","transform","transition","closestMultipleOf360","Math","round","setTimeout","handleFlip","useCallback","newRotation","handlePointerDown","event","preventDefault","clientX","_ref$current","setPointerCapture","pointerId","handlePointerMove","_ref$current2","hasPointerCapture","_ref","PointerEvent","nativeEvent","deltaX","handlePointerUp","_ref$current3","releasePointerCapture","handleClick","cardElement","addEventListener","removeEventListener","CardSpin","className","children","height","width","_ref$rotationSpeed","_ref$draggable","_ref$hoverToStop","_ref$clickToFlip","props","_objectWithoutPropertiesLoose","_excluded","cardRef","_useCardSpin","minWidth","maxWidth","minHeight","maxHeight","cursor","userSelect","willChange","React","onMouseEnter","onMouseLeave","onPointerDown","onPointerMove","onPointerUp","onPointerCancel","displayName","ErrorBoundary","_Component","_this","call","state","hasError","_inheritsLoose","getDerivedStateFromError","_proto","prototype","componentDidCatch","error","errorInfo","console","render","Component","Card3D","thickness","_ref$mode","mode","leftColor","rightColor","_ref$borderColor","borderColor","length","warn","front","back","borderStyle","colorLeft","colorRight","halfThickness","effectiveRotationSpeed","frontStyle","background","backStyle","leftSideStyle","left","floor","backgroundColor","rightSideStyle","right","role","tabIndex"],"mappings":"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"}